plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
    id "com.diffplug.spotless"
}

group = "io.littlehorse"
version = "${lhVersion}-SNAPSHOT"

dependencies {
    implementation platform("io.quarkus.platform:quarkus-bom:${quarkusVersion}")
    implementation project(":runtime")
    implementation "io.quarkus:quarkus-grpc-common-deployment"
    implementation "io.quarkus:quarkus-smallrye-health-spi"
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
    systemProperty "lhVersion", "${lhVersion}"
}

tasks.register("javadocJar", Jar) {
    archiveClassifier = "javadoc"
    from javadoc
}

tasks.register("sourcesJar", Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = "littlehorse-quarkus-deployment"
            version = version
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = "LittleHorse Quarkus Extension"
                description = "LittleHorse Quarkus Extension"
                url = "https://github.com/littlehorse-enterprises/littlehorse"
                licenses {
                    license {
                        name = "Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0"
                    }
                }
                developers {
                    developer {
                        name = "LittleHorse Engineering"
                        email = "engineering@littlehorse.io"
                    }
                }
                scm {
                    url = "https://github.com/littlehorse-enterprises/lh-quarkus"
                    connection = "scm:git:git//github.com/littlehorse-enterprises/lh-quarkus.git"
                    developerConnection = "scm:git:ssh://github.com/littlehorse-enterprises/lh-quarkus.git"
                }
                packaging = "jar"
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }

    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications.mavenJava
}

javadoc {
    excludes = []
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-parameters"
}

compileTestJava {
    options.encoding = "UTF-8"
}

repositories {
    mavenLocal()
    mavenCentral()
}

spotless {
    java {
        removeUnusedImports()
        palantirJavaFormat().style("AOSP")
    }
}
