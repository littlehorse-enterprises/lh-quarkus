plugins {
    id "com.diffplug.spotless"
    id "io.github.gradle-nexus.publish-plugin"
    id "io.quarkus"
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
        }
    }
}

allprojects {
    apply plugin: "com.diffplug.spotless"
    apply plugin: "java"
    apply plugin: "idea"

    group = "io.littlehorse"
    version = "${lhVersion}"

    test {
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat = "full"
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-parameters"
    }

    compileTestJava {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    spotless {
        java {
            removeUnusedImports()
            palantirJavaFormat().style("AOSP")
        }
    }
}

configure(lhExtensions.split(',').collectMany { ["littlehorse-$it-runtime", "littlehorse-$it-deployment"] }.collect { project(":$it") }) {
    apply plugin: "signing"
    apply plugin: "maven-publish"
    apply plugin: "java-library"

    tasks.register("javadocJar", Jar) {
        archiveClassifier = "javadoc"
        from javadoc
    }

    tasks.register("sourcesJar", Jar) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    javadoc {
        excludes = []
        options.memberLevel = JavadocMemberLevel.PUBLIC
    }
}

configure(lhExamples.split(',').collect { project(":example-$it") }) {
    apply plugin: "io.quarkus"

    quarkusIntTest {
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat = "full"
        }
        systemProperty "lhVersion", "${lhVersion}"
    }

    testNative {
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat = "full"
        }
        systemProperty "lhVersion", "${lhVersion}"
    }

    test {
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat = "full"
        }
        systemProperty "lhVersion", "${lhVersion}"
    }
}
