plugins {
    id "com.diffplug.spotless"
    id "io.quarkus"
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
}

dependencies {
    // quarkus
    implementation enforcedPlatform("io.quarkus.platform:quarkus-bom:${quarkusVersion}")
    implementation "io.quarkus:quarkus-arc"
    implementation "io.quarkus:quarkus-rest"
    implementation "io.quarkus:quarkus-rest-jackson"
    implementation "io.quarkus:quarkus-smallrye-health"
    implementation "io.quarkus:quarkus-smallrye-health"
    implementation "org.apache.commons:commons-lang3"

    // quarkus extension
    implementation project(":runtime")

    // logs
    implementation "org.jboss.logging:commons-logging-jboss-logging"
    implementation "org.jboss.logmanager:log4j-jboss-logmanager"
    implementation "org.jboss.slf4j:slf4j-jboss-logmanager"
    implementation "org.jboss.logmanager:log4j2-jboss-logmanager"

    // tests
    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation "io.quarkus:quarkus-junit5-mockito"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "net.datafaker:datafaker:${datafakerVersion}"
    testImplementation "io.littlehorse:littlehorse-test-utils-container:${lhVersion}"
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
}

quarkusIntTest {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
    systemProperty "lhVersion", "${lhVersion}"
}

testNative {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
    systemProperty "lhVersion", "${lhVersion}"
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
    systemProperty "lhVersion", "${lhVersion}"
}

group = "io.littlehorse"
version = "${lhVersion}"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-parameters"
}

compileTestJava {
    options.encoding = "UTF-8"
}

repositories {
    mavenLocal()
    mavenCentral()
}

spotless {
    java {
        removeUnusedImports()
        palantirJavaFormat().style("AOSP")
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
        }
    }
}
